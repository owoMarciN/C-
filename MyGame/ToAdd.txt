//InputManager.h
    
Vector2 MousePos();
void UpdatePrevInput();

//InputManager.cpp
InputManager::InputManager(){
    mKeyState = SDL_GetKeyboardState(nKeyLength);
    mPrevKeyboardState = new Uint8[mKeyLength];
    memcpy(mPrevKeyboardState, mKeyboardState, mKeyLength);
}

InputManager::~InputManager(){
    delete [] mPrevKeyboardState;
    mPrevKeyboardState = NULL;
}

bool InputManager::KeyPressed(SDL_Scancode scancode){
    return !mPrevKeyboardState[scancode] && mKeyboardState[scancode];
}

bool InputManager::KeyReleased(SDL_Scancode scancode){
    return mPrevKeyboardState[scancode]  && !mKeyboardState[scancode];
}

Vector2 InputManager::MousePos(){
    return Vector2((float)mMouseXPos, (float)mMouseYPos);
}

bool InputManager::MouseButtonDown(MOUSE_BUTTON button){
    Uint32 mask = 0;
    switch(butto){
        case LEFT:
            mask = SDL_BUTTON_LMASK;
            break;
        case RIGHT:
            mask = SDL_BUTTON_RMASK;
            break;
        case MIDDLE:
            mask = SDL_BUTTON_MMASK;
            break;
        case BACK:
            mask = SDL_BUTTON_X1MASK;
            break;
        case FORWARD:
            mask = SDL_BUTTON_X2MASK;
            break;
    }
    return (mMouseState & mask);
}

bool InputManager::MousePressed(MOUSE_BUTTON button){
    Uint32 mask = 0;
    switch(butto){
        case LEFT:
            mask = SDL_BUTTON_LMASK;
            break;
        case RIGHT:
            mask = SDL_BUTTON_RMASK;
            break;
        case MIDDLE:
            mask = SDL_BUTTON_MMASK;
            break;
        case BACK:
            mask = SDL_BUTTON_X1MASK;
            break;
        case FORWARD:
            mask = SDL_BUTTON_X2MASK;
            break;
    }
    return !(mPrevMouseState & mask) && (mMouseState & mask);
}

bool InputManager::MouseReleased(MOUSE_BUTTON button){
    Uint32 mask = 0;
    switch(butto){
        case LEFT:
            mask = SDL_BUTTON_LMASK;
            break;
        case RIGHT:
            mask = SDL_BUTTON_RMASK;
            break;
        case MIDDLE:
            mask = SDL_BUTTON_MMASK;
            break;
        case BACK:
            mask = SDL_BUTTON_X1MASK;
            break;
        case FORWARD:
            mask = SDL_BUTTON_X2MASK;
            break;
    }
    return (mPrevMouseState & mask) && !(mMouseState & mask);
}

void InputManager::Update(){
    mMouseState = SDL_GetMouseStatem(&mMouseXPos, &mMouseYPos);
}

void InputManager::UpdatePrevInput(){
    mamcpy(mPrevKeyboardState, mKeyboardState, mKeyLength);
    mPrevMouseState = mMouseState;
}

//GameManager.h
//private: 
    void EarlyUpdate()
    void Update();
    void LateUpdate();
    void Render();

//GameManager.cpp

void GameManager::EarlyUpdate(){
    mInputMgr->Update();
}

void GameManager::Update(){
    //Input Catching and Rotations of objects
    //Physics and collisions
}

void GameManager::Render(){
    //Graphics rendering
}

void GameManager::LateUpdate(){
    mInputMgr->UpdatePrevInput();
    mTimer->Reset();
}

//Inside if(FrameRate and delta_time)
if( ... ){
    EarlyUpdate();
    Update();
    LateUpdate();
    Render();
}

